# -*- coding: utf-8 -*-

import os
import sys
import shutil
import re

import parser
from writers import py_writer, binary_writer

import types
import convention_table

CUR_PATH = os.path.dirname(os.path.abspath(__file__))

INPUT_PATH      = os.path.join(CUR_PATH, "input")
OUTPUT_PATH     = os.path.join(CUR_PATH, "output")
TEMP_PATH       = os.path.join(CUR_PATH, "temp")
CONVERTER_PATH  = "converter"
SHEET_PATH      = os.path.normpath(os.path.join(CUR_PATH, "../../Assets/Resources/data"))

WRITE_PY = True
WRITE_LUA = True

FORCE_RUN = True

def convert_module(module, infile, outfile, sheet_index = 0):
	input_file = os.path.join(INPUT_PATH, infile)

	pa = parser.createParser(input_file, module, FORCE_RUN, sheet_index)
	ret = pa.do_parse()
	if ret is not None:
		print "Failed:", ret
		return False

	writers = (
		(py_writer.PyWriter, os.path.join(TEMP_PATH, outfile + ".py"), ),
		(binary_writer.BinaryWriter, os.path.join(OUTPUT_PATH, outfile + ".bin"), ),
	)

	extra = None
	post_process = module.__dict__.get("post_process")
	if post_process is not None: extra = post_process(pa.sheet)

	for writer_class, output_file in writers:
		output_dir = os.path.dirname(output_file)
		if not os.path.isdir(output_dir):
			os.makedirs(output_dir)

		handle = open(output_file, "w")
		
		wt = writer_class(handle)
		wt.write_comment("this file is auto generated by xls2lua tools, don't try to modify it.")
		wt.write_comment("from %s" % (infile, ))
		wt.output("\n")

		comments = pa.get_comments()
		if comments is not None:
			for coment in comments:
				wt.write_comment(coment)
			wt.output("\n")

		wt.begin_write()
		wt.write_sheet("main_sheet", pa.sheet)

		wt.write_value("main_length", len(pa.sheet))

		keys = sorted(pa.sheet.iterkeys())
		wt.write_value("main_keys", keys)
		
		if extra is not None:
			assert(isinstance(extra, dict))
			wt.write_module(extra)

		wt.end_write()
		wt.flush()
		handle.close()

	return True

def gather_all_excels(path):
	excel_files = []

	path_len = len(path)
	if path[-1] != '/': path_len += 1

	for root, dirs, files in os.walk(path):
		i = 0
		while i < len(dirs):
			if dirs[i][0] == '.':
				dirs.pop(i)
			else:
				i += 1

		relative_path = root[path_len : ]

		for fname in files:
			ext = os.path.splitext(fname)[1]
			if ext == ".xls" or ext == ".xlsx":
				file_path = os.path.join(relative_path, fname)
				excel_files.append(file_path)

	print "total excel files:", len(excel_files)
	return excel_files

def get_file_name(path):
	index = path.rfind('.')
	return path[:index] if index >= 0 else ""

def convert_in_path(path):
	excel_files = gather_all_excels(path)

	for value in convention_table.CONVENTION_TABLE:
		pattern 	= value[0]
		converter 	= value[1]
		new_name 	= value[2] if len(value) > 2 else None
		sheet_index = value[3] if len(value) > 3 else 0

		compiled_pattern = re.compile(pattern)

		for infile in excel_files:
			if not compiled_pattern.match(infile): continue

			if new_name is None:
				outfile = get_file_name(infile)
			else:
				outfile = compiled_pattern.sub(new_name, infile)

			if not convert_file(infile, outfile, converter, sheet_index):
				if not FORCE_RUN: return

	return

def convert_file(infile, outfile, converter, sheet_index = 0):
	print converter, "<-", infile

	module = __import__(CONVERTER_PATH + "." + converter, globals(), locals(), [converter, ])
	return convert_module(module, infile, outfile, sheet_index)


def convert_in_list():
	for infile, converter, outfile in convention_table.CONVENTION_TABLE:
		print converter, "<-", infile

		module = __import__(converter)
		if not convert_module(module, infile, outfile):
			break

	return

def copytree(src, dst, symlinks=False, ignore=None):
	names = os.listdir(src)
	if ignore is not None:
		ignored_names = ignore(src, names)
	else:
		ignored_names = set()

	if not os.path.isdir(dst):
		os.makedirs(dst)

	errors = []
	for name in names:
		if name in ignored_names:
			continue

		srcname = os.path.join(src, name)
		dstname = os.path.join(dst, name)
		if os.path.isdir(srcname):
			copytree(srcname, dstname, symlinks, ignore)
		else:
			shutil.copy2(srcname, dstname)

	return

def main():
	mode = sys.argv[1] if len(sys.argv) > 1 else "replace"

	if os.path.isdir(TEMP_PATH):
		shutil.rmtree(TEMP_PATH)

	if os.path.isdir(OUTPUT_PATH):
		shutil.rmtree(OUTPUT_PATH)

	if mode == "rewrite":
		if os.path.isdir(SHEET_PATH):
			shutil.rmtree(SHEET_PATH)

	os.mkdir(TEMP_PATH)
	os.mkdir(OUTPUT_PATH)
	
	convert_in_path(INPUT_PATH)

	print "copy files to", SHEET_PATH
	copytree(OUTPUT_PATH, SHEET_PATH)

	return

if __name__ == "__main__":
	main()
